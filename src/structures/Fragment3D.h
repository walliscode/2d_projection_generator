/////////////////////////////////////////////////
/// @file
/// @brief Declaration of the Fragment3D class.
/////////////////////////////////////////////////

/////////////////////////////////////////////////
/// Preprocessor Directives
/////////////////////////////////////////////////
#pragma once

/////////////////////////////////////////////////
/// Headers
/////////////////////////////////////////////////
#include "Vertex3.h"
#include "happly.h"
#include <array>
#include <vector>
namespace projection_generator {

/////////////////////////////////////////////////
/// @class Fragment3D
/// @brief Fully describes a 3d "Fragment" (Steamrot name for a 3D object).
///
/////////////////////////////////////////////////
class Fragment3D {
private:
  /////////////////////////////////////////////////
  /// @brief All vertex information provided by the object file (.ply e.t.c)
  /////////////////////////////////////////////////
  std::vector<Vertex3> m_vertices;

  /////////////////////////////////////////////////
  /// @brief For storing the faces provided by the object file (.ply e.t.c)
  /////////////////////////////////////////////////
  std::vector<std::array<size_t, 4>> m_faces;

  /////////////////////////////////////////////////
  /// @brief storage of the triangles that are generated from the faces
  /////////////////////////////////////////////////
  std::vector<std::array<size_t, 3>> m_triangles;

  void ConfigureFromPlyFile(happly::PLYData &data);

public:
  /////////////////////////////////////////////////
  /// @brief Constructor taking a PLYData object
  ///
  /// @param data [TODO:parameter]
  /////////////////////////////////////////////////
  Fragment3D(const happly::PLYData &data);
};
} // namespace projection_generator
